// test/test_helpers.mocks.dart
// Mocks generated by Mockito 5.4.4 from annotations
// in azkari/test/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:ui' as _i22;

import 'package:azkari/core/error/failures.dart' as _i12;
import 'package:azkari/core/services/messenger_service.dart' as _i21;
import 'package:azkari/core/services/notification_service.dart' as _i19;
import 'package:azkari/data/models/azkar_model.dart' as _i16;
import 'package:azkari/data/models/daily_goal_model.dart' as _i8;
import 'package:azkari/data/models/managed_goal_model.dart' as _i7;
import 'package:azkari/data/models/tasbih_model.dart' as _i6;
import 'package:azkari/data/repositories/azkar_repository.dart' as _i15;
import 'package:azkari/data/repositories/goals_repository.dart' as _i4;
import 'package:azkari/data/repositories/tasbih_repository.dart' as _i5;
import 'package:azkari/features/goal_management/use_cases/add_tasbih_use_case.dart'
    as _i23;
import 'package:azkari/features/prayer_times/data/models/prayer_settings_model.dart'
    as _i18;
import 'package:azkari/features/prayer_times/data/repositories/prayer_settings_repository.dart'
    as _i17;
import 'package:azkari/features/prayer_times/data/services/location_service.dart'
    as _i9;
import 'package:azkari/features/settings/use_cases/update_evening_notification_use_case.dart'
    as _i27;
import 'package:azkari/features/settings/use_cases/update_font_scale_use_case.dart'
    as _i25;
import 'package:azkari/features/settings/use_cases/update_morning_notification_use_case.dart'
    as _i26;
import 'package:azkari/features/settings/use_cases/update_theme_use_case.dart'
    as _i24;
import 'package:azkari/features/tasbih/use_cases/increment_daily_count_use_case.dart'
    as _i28;
import 'package:azkari/features/tasbih/use_cases/reset_daily_progress_use_case.dart'
    as _i29;
import 'package:azkari/features/tasbih/use_cases/set_active_tasbih_use_case.dart'
    as _i30;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/material.dart' as _i3;
import 'package:geolocator/geolocator.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i20;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeGoalsRepository_2 extends _i1.SmartFake
    implements _i4.GoalsRepository {
  _FakeGoalsRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTasbihRepository_3 extends _i1.SmartFake
    implements _i5.TasbihRepository {
  _FakeTasbihRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTasbihModel_4 extends _i1.SmartFake implements _i6.TasbihModel {
  _FakeTasbihModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeManagedGoal_5 extends _i1.SmartFake implements _i7.ManagedGoal {
  _FakeManagedGoal_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDailyGoalModel_6 extends _i1.SmartFake
    implements _i8.DailyGoalModel {
  _FakeDailyGoalModel_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationService_7 extends _i1.SmartFake
    implements _i9.LocationService {
  _FakeLocationService_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePosition_8 extends _i1.SmartFake implements _i10.Position {
  _FakePosition_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_9<T> extends _i1.SmartFake implements _i11.Future<T> {
  _FakeFuture_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAzkarRepository_10 extends _i1.SmartFake
    implements _i1.Mock, _i1.Mock {}

/// A class which mocks [TasbihRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasbihRepository extends _i1.Mock implements _i5.TasbihRepository {
  MockTasbihRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<List<_i6.TasbihModel>> getCustomTasbihList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomTasbihList,
          [],
        ),
        returnValue: _i11.Future<List<_i6.TasbihModel>>.value(<_i6.TasbihModel>[]),
      ) as _i11.Future<List<_i6.TasbihModel>>);

  @override
  _i11.Future<List<_i6.TasbihModel>> getActiveTasbihList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveTasbihList,
          [],
        ),
        returnValue: _i11.Future<List<_i6.TasbihModel>>.value(<_i6.TasbihModel>[]),
      ) as _i11.Future<List<_i6.TasbihModel>>);

  @override
  _i11.Future<_i6.TasbihModel> addTasbih(String? text) => (super.noSuchMethod(
        Invocation.method(
          #addTasbih,
          [text],
        ),
        returnValue: _i11.Future<_i6.TasbihModel>.value(_FakeTasbihModel_4(
          this,
          Invocation.method(
            #addTasbih,
            [text],
          ),
        )),
      ) as _i11.Future<_i6.TasbihModel>);

  @override
  _i11.Future<void> updateTasbihText(
    int? id,
    String? newText,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasbihText,
          [
            id,
            newText,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> updateSortOrders(Map<int, int>? newOrders) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSortOrders,
          [newOrders],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [GoalsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoalsRepository extends _i1.Mock implements _i4.GoalsRepository {
  MockGoalsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<void> setGoal(
    int? tasbihId,
    int? targetCount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setGoal,
          [
            tasbihId,
            targetCount,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> activateGoal(
    int? tasbihId,
    int? targetCount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateGoal,
          [
            tasbihId,
            targetCount,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> deactivateGoal(int? tasbihId) => (super.noSuchMethod(
        Invocation.method(
          #deactivateGoal,
          [tasbihId],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<List<_i7.ManagedGoal>> getManagedGoals() => (super.noSuchMethod(
        Invocation.method(
          #getManagedGoals,
          [],
        ),
        returnValue:
            _i11.Future<List<_i7.ManagedGoal>>.value(<_i7.ManagedGoal>[]),
      ) as _i11.Future<List<_i7.ManagedGoal>>);

  @override
  _i11.Future<List<_i8.DailyGoalModel>> getGoalsWithProgressForDate(
          String? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGoalsWithProgressForDate,
          [date],
        ),
        returnValue: _i11.Future<List<_i8.DailyGoalModel>>.value(
            <_i8.DailyGoalModel>[]),
      ) as _i11.Future<List<_i8.DailyGoalModel>>);

  @override
  _i11.Future<List<_i8.DailyGoalModel>> getTodayGoalsWithProgress() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodayGoalsWithProgress,
          [],
        ),
        returnValue: _i11.Future<List<_i8.DailyGoalModel>>.value(
            <_i8.DailyGoalModel>[]),
      ) as _i11.Future<List<_i8.DailyGoalModel>>);

  @override
  _i11.Future<Map<String, double>> getMonthlyProgressSummary(
    String? startDate,
    String? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMonthlyProgressSummary,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i11.Future<Map<String, double>>.value(<String, double>{}),
      ) as _i11.Future<Map<String, double>>);

  @override
  _i11.Future<void> incrementTasbihDailyCount(int? tasbihId) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementTasbihDailyCount,
          [tasbihId],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> resetDailyCountForTasbih(int? tasbihId) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetDailyCountForTasbih,
          [tasbihId],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<Map<int, int>> getTodayTasbihCounts() => (super.noSuchMethod(
        Invocation.method(
          #getTodayTasbihCounts,
          [],
        ),
        returnValue: _i11.Future<Map<int, int>>.value(<int, int>{}),
      ) as _i11.Future<Map<int, int>>);
}

/// A class which mocks [AzkarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAzkarRepository extends _i1.Mock implements _i15.AzkarRepository {
  MockAzkarRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<List<String>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i11.Future<List<String>>.value(<String>[]),
      ) as _i11.Future<List<String>>);

  @override
  _i11.Future<List<_i16.AzkarModel>> getAzkarByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAzkarByCategory,
          [category],
        ),
        returnValue:
            _i11.Future<List<_i16.AzkarModel>>.value(<_i16.AzkarModel>[]),
      ) as _i11.Future<List<_i16.AzkarModel>>);

  @override
  _i11.Future<List<_i16.AzkarModel>> getAzkarByIds(List<int>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAzkarByIds,
          [ids],
        ),
        returnValue:
            _i11.Future<List<_i16.AzkarModel>>.value(<_i16.AzkarModel>[]),
      ) as _i11.Future<List<_i16.AzkarModel>>);
}

/// A class which mocks [PrayerSettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrayerSettingsRepository extends _i1.Mock
    implements _i17.PrayerSettingsRepository {
  MockPrayerSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<void> saveSettings(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSettings,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i18.PrayerSettingsModel? getSettings() =>
      (super.noSuchMethod(Invocation.method(
        #getSettings,
        [],
      )) as _i18.PrayerSettingsModel?);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i9.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i10.Position?> getCurrentPosition() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i11.Future<_i10.Position?>.value(),
      ) as _i11.Future<_i10.Position?>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i19.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> scheduleMorningReminder() => (super.noSuchMethod(
        Invocation.method(
          #scheduleMorningReminder,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> scheduleEveningReminder() => (super.noSuchMethod(
        Invocation.method(
          #scheduleEveningReminder,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> cancelMorningReminder() => (super.noSuchMethod(
        Invocation.method(
          #cancelMorningReminder,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> cancelEveningReminder() => (super.noSuchMethod(
        Invocation.method(
          #cancelEveningReminder,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i20.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i11.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [MessengerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessengerService extends _i1.Mock implements _i21.MessengerService {
  MockMessengerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void showSuccessSnackBar(String? message) => super.noSuchMethod(
        Invocation.method(
          #showSuccessSnackBar,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showErrorSnackBar(String? message) => super.noSuchMethod(
        Invocation.method(
          #showErrorSnackBar,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showInfoSnackBar(String? message) => super.noSuchMethod(
        Invocation.method(
          #showInfoSnackBar,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AddTasbihUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTasbihUseCase extends _i1.Mock implements _i23.AddTasbihUseCase {
  MockAddTasbihUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> execute(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [text],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [text],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [UpdateThemeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateThemeUseCase extends _i1.Mock
    implements _i24.UpdateThemeUseCase {
  MockUpdateThemeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> execute(_i22.ThemeMode? newTheme) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [newTheme],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [newTheme],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [UpdateFontScaleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateFontScaleUseCase extends _i1.Mock
    implements _i25.UpdateFontScaleUseCase {
  MockUpdateFontScaleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> execute(double? newScale) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [newScale],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [newScale],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [UpdateMorningNotificationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateMorningNotificationUseCase extends _i1.Mock
    implements _i26.UpdateMorningNotificationUseCase {
  MockUpdateMorningNotificationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> execute(bool? isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [isEnabled],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [isEnabled],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [UpdateEveningNotificationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateEveningNotificationUseCase extends _i1.Mock
    implements _i27.UpdateEveningNotificationUseCase {
  MockUpdateEveningNotificationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> execute(bool? isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [isEnabled],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [isEnabled],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [IncrementDailyCountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIncrementDailyCountUseCase extends _i1.Mock
    implements _i28.IncrementDailyCountUseCase {
  MockIncrementDailyCountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> execute(int? tasbihId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [tasbihId],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [tasbihId],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [ResetDailyProgressUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetDailyProgressUseCase extends _i1.Mock
    implements _i29.ResetDailyProgressUseCase {
  MockResetDailyProgressUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> execute(int? tasbihId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [tasbihId],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [tasbihId],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [SetActiveTasbihUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetActiveTasbihUseCase extends _i1.Mock
    implements _i30.SetActiveTasbihUseCase {
  MockSetActiveTasbihUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> execute(int? tasbihId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [tasbihId],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [tasbihId],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}